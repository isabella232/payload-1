# frozen_string_literal: true
# <!-- BEGIN AUTOGENERATED ANNOTATIONS -->
# ## Schema Information
#
# Table name: `users`
#
# ### Columns
#
# Name                          | Type               | Attributes
# ----------------------------- | ------------------ | ---------------------------
# **`id`**                      | `integer`          | `not null, primary key`
# **`email`**                   | `string`           | `default(""), not null`
# **`encrypted_password`**      | `string`           | `default(""), not null`
# **`reset_password_token`**    | `string`           |
# **`reset_password_sent_at`**  | `datetime`         |
# **`remember_created_at`**     | `datetime`         |
# **`sign_in_count`**           | `integer`          | `default(0), not null`
# **`current_sign_in_at`**      | `datetime`         |
# **`last_sign_in_at`**         | `datetime`         |
# **`current_sign_in_ip`**      | `inet`             |
# **`last_sign_in_ip`**         | `inet`             |
# **`created_at`**              | `datetime`         | `not null`
# **`updated_at`**              | `datetime`         | `not null`
# **`username`**                | `string`           | `not null`
# **`confirmation_token`**      | `string`           |
# **`confirmed_at`**            | `datetime`         |
# **`confirmation_sent_at`**    | `datetime`         |
# **`unconfirmed_email`**       | `string`           |
# **`failed_attempts`**         | `integer`          | `default(0), not null`
# **`unlock_token`**            | `string`           |
# **`locked_at`**               | `datetime`         |
#
# ### Indexes
#
# * `index_users_on_confirmation_token` (_unique_):
#     * **`confirmation_token`**
# * `index_users_on_email` (_unique_):
#     * **`email`**
# * `index_users_on_reset_password_token` (_unique_):
#     * **`reset_password_token`**
# * `index_users_on_unlock_token` (_unique_):
#     * **`unlock_token`**
# * `index_users_on_username` (_unique_):
#     * **`username`**
#
# <!-- END AUTOGENERATED ANNOTATIONS -->

class User < ApplicationRecord
  has_many :btc_addresses
  has_many :btc_txes, through: :btc_addresses
  has_one :account
  has_one :verification_personal
  has_one :withdrawal_option

  before_save :build_account
  after_commit :build_first_btc_account

  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable,
         :confirmable, :lockable, :timeoutable, authentication_keys: [:login]

  validates :username,
            presence:   true,
            uniqueness: {
              case_sensitive: false
            },
            format:     { with: /\A[a-zA-Z0-9_.-]+\Z/ }

  # virtual attribute
  attr_accessor :login

  attr_writer :login

  # getter for login
  def login
    @login || username || email
  end

  def self.find_for_database_authentication(warden_conditions)
    conditions = warden_conditions.dup
    login = conditions.delete(:login)
    if login
      where(conditions.to_h).find_by(['lower(username) = :value OR lower(email) = :value', { value: login.downcase }])
    elsif conditions.key?(:username) || conditions.key?(:email)
      conditions[:email]&.downcase!
      find_by(conditions.to_h)
    end
  end

  def email_required?
    false
  end

  def email_changed?
    false
  end

  private

  def build_first_btc_account
    btc_addresses.count.zero? ? btc_addresses << BtcAddress.new : 0
  end
end
